{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "toc": true
   },
   "source": [
    "<h1>Содержание<span class=\"tocSkip\"></span></h1>\n",
    "<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#Изучение-данных\" data-toc-modified-id=\"Изучение-данных-1\"><span class=\"toc-item-num\">1&nbsp;&nbsp;</span>Изучение данных</a></span></li><li><span><a href=\"#Предобработка-данных\" data-toc-modified-id=\"Предобработка-данных-2\"><span class=\"toc-item-num\">2&nbsp;&nbsp;</span>Предобработка данных</a></span><ul class=\"toc-item\"><li><span><a href=\"#Замена-типа-данных\" data-toc-modified-id=\"Замена-типа-данных-2.1\"><span class=\"toc-item-num\">2.1&nbsp;&nbsp;</span>Замена типа данных</a></span></li><li><span><a href=\"#Поиск-и-исправление-ошибок-в-данных\" data-toc-modified-id=\"Поиск-и-исправление-ошибок-в-данных-2.2\"><span class=\"toc-item-num\">2.2&nbsp;&nbsp;</span>Поиск и исправление ошибок в данных</a></span></li><li><span><a href=\"#Количество-сделанных-звонков-и-израсходованных-минут-разговора-по-месяцам-для-каждого-пользователя\" data-toc-modified-id=\"Количество-сделанных-звонков-и-израсходованных-минут-разговора-по-месяцам-для-каждого-пользователя-2.3\"><span class=\"toc-item-num\">2.3&nbsp;&nbsp;</span>Количество сделанных звонков и израсходованных минут разговора по месяцам для каждого пользователя</a></span></li><li><span><a href=\"#Количество-отправленных-сообщений-по-месяцам-для-каждого-пользователя\" data-toc-modified-id=\"Количество-отправленных-сообщений-по-месяцам-для-каждого-пользователя-2.4\"><span class=\"toc-item-num\">2.4&nbsp;&nbsp;</span>Количество отправленных сообщений по месяцам для каждого пользователя</a></span></li><li><span><a href=\"#Объем-израсходованного-интернет-трафика-по-месяцам-для-каждого-пользователя\" data-toc-modified-id=\"Объем-израсходованного-интернет-трафика-по-месяцам-для-каждого-пользователя-2.5\"><span class=\"toc-item-num\">2.5&nbsp;&nbsp;</span>Объем израсходованного интернет-трафика по месяцам для каждого пользователя</a></span></li><li><span><a href=\"#Помесячная-выручка-с-каждого-пользователя\" data-toc-modified-id=\"Помесячная-выручка-с-каждого-пользователя-2.6\"><span class=\"toc-item-num\">2.6&nbsp;&nbsp;</span>Помесячная выручка с каждого пользователя</a></span></li></ul></li><li><span><a href=\"#Анализ-данных\" data-toc-modified-id=\"Анализ-данных-3\"><span class=\"toc-item-num\">3&nbsp;&nbsp;</span>Анализ данных</a></span></li><li><span><a href=\"#Проверка-гипотез\" data-toc-modified-id=\"Проверка-гипотез-4\"><span class=\"toc-item-num\">4&nbsp;&nbsp;</span>Проверка гипотез</a></span><ul class=\"toc-item\"><li><span><a href=\"#Средняя-выручка-пользователей-тарифов-«Ультра»-и-«Смарт»-различается\" data-toc-modified-id=\"Средняя-выручка-пользователей-тарифов-«Ультра»-и-«Смарт»-различается-4.1\"><span class=\"toc-item-num\">4.1&nbsp;&nbsp;</span>Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается</a></span></li><li><span><a href=\"#Средняя-выручка-пользователей-из-Москвы-отличается-от-выручки-пользователей-из-других-регионов\" data-toc-modified-id=\"Средняя-выручка-пользователей-из-Москвы-отличается-от-выручки-пользователей-из-других-регионов-4.2\"><span class=\"toc-item-num\">4.2&nbsp;&nbsp;</span>Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов</a></span></li></ul></li><li><span><a href=\"#Общий-вывод\" data-toc-modified-id=\"Общий-вывод-5\"><span class=\"toc-item-num\">5&nbsp;&nbsp;</span>Общий вывод</a></span></li></ul></div>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Определение перспективного тарифа для телеком компании"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вы аналитик компании «Мегалайн» — федерального оператора сотовой связи. Клиентам предлагают два тарифных плана: «Смарт» и «Ультра». Чтобы скорректировать рекламный бюджет, коммерческий департамент хочет понять, какой тариф приносит больше денег.\n",
    "\n",
    "Вам предстоит сделать предварительный анализ тарифов на небольшой выборке клиентов. В вашем распоряжении данные 500 пользователей «Мегалайна»: кто они, откуда, каким тарифом пользуются, сколько звонков и сообщений каждый отправил за 2018 год. Нужно проанализировать поведение клиентов и сделать вывод — какой тариф лучше.\n",
    "\n",
    "**Основная цель проекта** - определить тариф, приносящий больше всего прибыли для организации."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Изучение данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "from scipy.stats import norm\n",
    "from IPython.display import display\n",
    "from functools import reduce\n",
    "from scipy import stats as st\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_calls = pd.read_csv('datasets/telecom/calls.csv')\n",
    "df_calls.name = 'df_calls'\n",
    "\n",
    "df_internet = pd.read_csv('datasets/telecom/internet.csv')\n",
    "df_internet.name = 'df_internet'\n",
    "\n",
    "df_messages = pd.read_csv('datasets/telecom/messages.csv')\n",
    "df_messages.name = 'df_messages'\n",
    "\n",
    "df_tariffs = pd.read_csv('datasets/telecom/tariffs.csv')\n",
    "df_tariffs.name = 'df_tariffs'\n",
    "\n",
    "df_users = pd.read_csv('datasets/telecom/users.csv')\n",
    "df_users.name = 'df_users'\n",
    "\n",
    "sns.set_style(\"darkgrid\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Функция для первичной обработки всех dataframe"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_list = [df_calls, df_internet, df_messages, df_tariffs, df_users]\n",
    "\n",
    "def get_round_all_df(func):\n",
    "    for df in df_list:\n",
    "        print('Таблица -', df.name)\n",
    "        \n",
    "        if func == 'head':\n",
    "            display(df.head(5))\n",
    "        \n",
    "        elif func == 'info':\n",
    "            df.info()\n",
    "            \n",
    "        elif func == 'isna':\n",
    "            print(df.isna().any())\n",
    "            \n",
    "        else:\n",
    "            print('Неизвестная функция')\n",
    "        \n",
    "        print('--------------------------------------------------------------')\n",
    "        print()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица - df_calls\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-07-25</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>2.85</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>13.80</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-15</td>\n",
       "      <td>5.18</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id   call_date  duration  user_id\n",
       "0  1000_0  2018-07-25      0.00     1000\n",
       "1  1000_1  2018-08-17      0.00     1000\n",
       "2  1000_2  2018-06-11      2.85     1000\n",
       "3  1000_3  2018-09-21     13.80     1000\n",
       "4  1000_4  2018-12-15      5.18     1000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_internet\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>112.95</td>\n",
       "      <td>2018-11-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>1052.81</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>1197.26</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>550.27</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>302.56</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      id  mb_used session_date  user_id\n",
       "0           0  1000_0   112.95   2018-11-25     1000\n",
       "1           1  1000_1  1052.81   2018-09-07     1000\n",
       "2           2  1000_2  1197.26   2018-06-25     1000\n",
       "3           3  1000_3   550.27   2018-08-22     1000\n",
       "4           4  1000_4   302.56   2018-09-24     1000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_messages\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-06-27</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-08-04</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-06-16</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-05</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id message_date  user_id\n",
       "0  1000_0   2018-06-27     1000\n",
       "1  1000_1   2018-10-08     1000\n",
       "2  1000_2   2018-08-04     1000\n",
       "3  1000_3   2018-06-16     1000\n",
       "4  1000_4   2018-12-05     1000"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_tariffs\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>tariff_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   rub_monthly_fee  rub_per_gb  rub_per_message  rub_per_minute tariff_name  \n",
       "0              550         200                3               3       smart  \n",
       "1             1950         150                1               1       ultra  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_users\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1001</td>\n",
       "      <td>41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Иван</td>\n",
       "      <td>Ежов</td>\n",
       "      <td>2018-11-01</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1002</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1003</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Белла</td>\n",
       "      <td>Белякова</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1004</td>\n",
       "      <td>68</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Новокузнецк</td>\n",
       "      <td>Татьяна</td>\n",
       "      <td>Авдеенко</td>\n",
       "      <td>2018-05-14</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  age churn_date         city first_name  last_name    reg_date  \\\n",
       "0     1000   52        NaN    Краснодар     Рафаил  Верещагин  2018-05-25   \n",
       "1     1001   41        NaN       Москва       Иван       Ежов  2018-11-01   \n",
       "2     1002   59        NaN  Стерлитамак    Евгений  Абрамович  2018-06-17   \n",
       "3     1003   23        NaN       Москва      Белла   Белякова  2018-08-17   \n",
       "4     1004   68        NaN  Новокузнецк    Татьяна   Авдеенко  2018-05-14   \n",
       "\n",
       "  tariff  \n",
       "0  ultra  \n",
       "1  smart  \n",
       "2  smart  \n",
       "3  ultra  \n",
       "4  ultra  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "--------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "get_round_all_df('head')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица - df_calls\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 202607 entries, 0 to 202606\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype  \n",
      "---  ------     --------------   -----  \n",
      " 0   id         202607 non-null  object \n",
      " 1   call_date  202607 non-null  object \n",
      " 2   duration   202607 non-null  float64\n",
      " 3   user_id    202607 non-null  int64  \n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 6.2+ MB\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_internet\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149396 entries, 0 to 149395\n",
      "Data columns (total 5 columns):\n",
      " #   Column        Non-Null Count   Dtype  \n",
      "---  ------        --------------   -----  \n",
      " 0   Unnamed: 0    149396 non-null  int64  \n",
      " 1   id            149396 non-null  object \n",
      " 2   mb_used       149396 non-null  float64\n",
      " 3   session_date  149396 non-null  object \n",
      " 4   user_id       149396 non-null  int64  \n",
      "dtypes: float64(1), int64(2), object(2)\n",
      "memory usage: 5.7+ MB\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_messages\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123036 entries, 0 to 123035\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count   Dtype \n",
      "---  ------        --------------   ----- \n",
      " 0   id            123036 non-null  object\n",
      " 1   message_date  123036 non-null  object\n",
      " 2   user_id       123036 non-null  int64 \n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 2.8+ MB\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_tariffs\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype \n",
      "---  ------                 --------------  ----- \n",
      " 0   messages_included      2 non-null      int64 \n",
      " 1   mb_per_month_included  2 non-null      int64 \n",
      " 2   minutes_included       2 non-null      int64 \n",
      " 3   rub_monthly_fee        2 non-null      int64 \n",
      " 4   rub_per_gb             2 non-null      int64 \n",
      " 5   rub_per_message        2 non-null      int64 \n",
      " 6   rub_per_minute         2 non-null      int64 \n",
      " 7   tariff_name            2 non-null      object\n",
      "dtypes: int64(7), object(1)\n",
      "memory usage: 256.0+ bytes\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_users\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype \n",
      "---  ------      --------------  ----- \n",
      " 0   user_id     500 non-null    int64 \n",
      " 1   age         500 non-null    int64 \n",
      " 2   churn_date  38 non-null     object\n",
      " 3   city        500 non-null    object\n",
      " 4   first_name  500 non-null    object\n",
      " 5   last_name   500 non-null    object\n",
      " 6   reg_date    500 non-null    object\n",
      " 7   tariff      500 non-null    object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n",
      "--------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "get_round_all_df('info')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица - df_calls\n",
      "id           False\n",
      "call_date    False\n",
      "duration     False\n",
      "user_id      False\n",
      "dtype: bool\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_internet\n",
      "Unnamed: 0      False\n",
      "id              False\n",
      "mb_used         False\n",
      "session_date    False\n",
      "user_id         False\n",
      "dtype: bool\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_messages\n",
      "id              False\n",
      "message_date    False\n",
      "user_id         False\n",
      "dtype: bool\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_tariffs\n",
      "messages_included        False\n",
      "mb_per_month_included    False\n",
      "minutes_included         False\n",
      "rub_monthly_fee          False\n",
      "rub_per_gb               False\n",
      "rub_per_message          False\n",
      "rub_per_minute           False\n",
      "tariff_name              False\n",
      "dtype: bool\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_users\n",
      "user_id       False\n",
      "age           False\n",
      "churn_date     True\n",
      "city          False\n",
      "first_name    False\n",
      "last_name     False\n",
      "reg_date      False\n",
      "tariff        False\n",
      "dtype: bool\n",
      "--------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "get_round_all_df('isna')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAA6oAAAG1CAYAAADwYwl5AAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjQuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/MnkTPAAAACXBIWXMAAAsTAAALEwEAmpwYAAA670lEQVR4nO3deUBU9f7/8dewqiiSSqbiArikuYdbKZZSbhHuiomaZl8tNcUF3NDUXMIlta9LFtfC3LpSmmW3tMWdzOq6fEtDc8VcEpNFYWDm94c/50qo4y1nOMDz8Y/MOXPOeZ/5OGfmNZ/POcdktVqtAgAAAADAIFzyuwAAAAAAAG5FUAUAAAAAGApBFQAAAABgKARVAAAAAIChEFQBAAAAAIZCUAUAAAAAGIpbfhcAACgczpw5o6eeeko1a9bMNf3SpUtq166dYmJi8qkyAABQ0BBUAQD3TbFixbRx48Zc0xYvXqyUlJR8qggAABREDP0FADhNRESEZs2ape7du6tt27ZatGiRbd7WrVvVuXNnPfvsswoPD9eBAwck3Qi606ZNsz3v1sepqamKjo5W165dFRoaqpkzZyo7O1uSVKtWLV2+fNm23M3HgwcPVlhYmOrWrat27dopLCxMR44cyVXn4sWL1bx5c4WFhSksLExNmzbVO++8I0mqU6eOFixYoK5du6p9+/b6/PPPbcv97//+rzp27KjQ0FCNGDFCFy9etO13mzZtbOurW7euDh48qEmTJmnBggW25Tdu3KiXX35ZkrR8+XK1b99ezzzzjF5++WWlpqYqISFB//M//yNJmjFjhkJDQyVJ3333nXr27KnQ0FB17dpV27dvlyQlJCTo0UcfVVhYmNq2batBgwYpIyMjT7tER0erVatWevbZZ/XEE09ozpw5t22/7OxsNWrUyLYfjRo10meffSZJ+uqrr9S7d2917dpVTzzxhN544w1JUmJiop555hnbOm59HB0dbXtd//y4TZs2OnjwYJ4abrbjhx9+qJCQEKWnpysjI0MdOnTQRx99dNu6AQAFDz2qAACn+vXXX7VmzRpdu3ZNPXv2VL169VSlShVNmTJFa9euVeXKlbVnzx699NJLthB0JzNnztQjjzyi2bNnKycnR9HR0frHP/6hwYMH33GZFStWSLoRhObOnat69erd9nkdO3a0DVeOjo62Tc/JyVHx4sWVkJCgn3/+WX379lVQUJC++uor7dixQ//85z9VokQJLV68OFfwGjdunNq3b2/btiQ999xzGjx4sIYPHy43NzetX79eQ4YM0bZt25SQkKD169erdOnSmjVrllatWqXy5ctLknbv3q1Dhw5p06ZNSklJ0YgRI7R06VI1aNBAv/zyi/r27at//vOfkqSgoCAtX75c0o3AvGXLFnXr1i3P/g4YMECDBg1SWlqaWrVqpT59+qhy5cq5nnPt2jU1btzYtk8RERGSJKvVqri4OM2ePVvVqlXT+fPn9eSTT6pfv353bIe/q0uXLtq5c6diY2OVlZWloKAgde7c2WHbAwA4F0EVAOBUvXr1kru7u9zd3dW+fXvt3LlTAQEBat68uS0YtWjRQmXKlNGhQ4fuuq6vv/5aBw8etIWy69ev55rfv39/ubjc/8FDffv2lSQ9/PDDqlmzpvbt26ft27era9euKlGihCSpX79+WrZsmbKysu64ntq1a8vPz09ff/21/P39deHCBbVs2VKvvfaa2rdvr9KlS0uSxo8fL+lGD+nevXu1f/9+rVmzRiaTSQcOHFCVKlXUoEEDSVKNGjXUuHFjffvttzKZTLZtZWVl6erVq/L29r7rvqWmpionJ0deXl555iUnJ9tqupXJZNKyZcv09ddfa/PmzTp27JisVquuXbsmSTp16pTCwsIkSRkZGfL09LQtu3LlSm3atEmSdO7cOdWoUcM2b8yYMSpWrJiKFy+u/v37q0OHDrm2++qrryosLEzFihVTQkLCXfcLAFCwEFQBAE7l5vafjx6r1SoXFxdZLJZcoermvJvDeO/EYrFo4cKFCgwMlCRdvXo113reffddlSlTRtKNIaP3i6ura64aXF1d8+yDxWKxW790o1d1w4YNqlatmnr27CmTySRXV9dc67p69aquXr0qSWrevLlCQkI0ZcoUrVq1Sjk5OXd87dzd3fXdd98pLCxMqampSk9Pv2MP8s3AeP78eTVo0OC2QfWnn36Sv79/nukZGRnq0qWLQkJCFBQUpG7dumnr1q2yWq2SpCpVqtjOXU5MTNT06dNty97syZVy91xLsvV4nzlzRp07d7aF8Zt+//13ZWZmKisrSxcuXMjTAwwAKLg4RxUA4FSbNm2SxWLRH3/8oS1btqhNmzZq0aKFdu7cqdOnT0uS9uzZo3PnzuUJJn/WsmVLrVy5UlarVVlZWRo6dKhWrVrl8H24eS7k4cOH9euvv6pJkyZq1aqVNmzYYDsHND4+Xk2aNJGHh8dd19WuXTv99NNP+te//mUbkvvYY4/piy++UFpamqQb58yuXLnStkyPHj1ksVi0YcMGNWzYUMePH7ed0/vLL79o3759atq0qaQbQ383btyoL7/8UuHh4Zo3b95t6xgwYIA2btyo3bt3y2q12no5b/Xpp5+qdevWeaafPHlSaWlpGjlypNq0aaPExERlZWXJYrHcdd/vValSpeTq6pqrx9xsNisyMlKvvPKKhg0bplGjRslsNt+X7QEA8h89qgAAp7p+/bq6d++u9PR09enTRy1atJAkTZkyRcOGDVNOTo6KFSumZcuWqVSpUpJuBKT9+/dLunG7m5ycHHXp0kUTJ07Ua6+9ptDQUJnNZj322GN64YUXHL4P33//vdavXy+LxaIFCxaodOnS6t69u86dO2cLkVWrVtXcuXPtrsvDw0Pt2rXTpUuXbL2/rVu3VlJSksLDwyVJ1atX1/Tp03NduGncuHF65ZVX1KlTJy1cuFDTp0/X9evXZTKZNGvWLPn7++uHH36w9ahaLBZZLBZFRUXdto6bPao3h/0+9thjueYvXLhQO3bs0Pnz523TTp06pddff11bt27VE088oQ4dOsjDw0M1a9ZU9erVdfLkSbtB/W7GjBkjDw8PXbt2TQMHDlRAQIBt3vz581WuXDn16NFD0o2LcS1YsEDjxo37y9sDABiHyXpzXA4AAA4WERGh5557znZRob8qOjpaXbp0UbNmze5TZfeuVq1a2rNnjy1U/l0ZGRnq27evYmJi1LBhw/uyTke402vepk0bffnll/lUFQCgsGLoLwCgwKlfv77Kli2b32X8bTt27NATTzyhVq1aGTqkSlJ4eLiqV6+eZ/qkSZPyoRoAQGFHjyoAAAAAwFDoUQUAAAAAGApBFQAAAABgKIa96q/FYlFODqOSAQAAAKAwcnd3veM8wwbVnByrrlzJyO8yAAAAAAAO4Otb6o7zGPoLAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAMe3saAPhvZWVlaebMV5WcfFZeXl6KjIzS9evXtGBBrFxcXOTh4aFJk15VmTJl8yybknJZgwZFaMGC/1XVqtWcXzwAAABsCKoACo2PP/5QxYuX0FtvrdSpUye0YMHrysrK0qhRY1WjRi199NEGvf/+uxo+PDLXctnZ2Xr99Zny8PDMp8oBAABwK4b+Aig0fv31VzVv/pgkqUqVajpx4ldNnTpTNWrUkiTl5OTcNoy++eYb6ty5m8qVK+fUegEAAHB7BFUAhUaNGjW1e/cOWa1WHTp0UJcuXdQDDzwgSTp48N9KSFivnj375Frm008/lo+Pj5o1a5EfJQMAAOA2TFar1ZrfRdyO2ZyjK1cy8rsMAAVIdna2lixZqKNHj6hevQb67rtErVjxnrZt+1zvvRenmTPnqlIlv1zLvPzyYJlMJklSUtJRVa5cRbNnz1fZsvSuAgAAOJKvb6k7ziOoAig0Dh06oEuXLuqJJ9rq55//T2vWxOuxx1pp48YEzZ49T97epe+6/LBhL2rs2AlcTAkAAMAJ7hZUuZgSgELDz6+KVqxYpjVrVqlkyVKKjp6kfv16q3z5hzRhwlhJUqNGj2rQoP/R9OkxGjz4JT300EP5XDUAAAD+jB5VAAAAAIDT3a1HlYspAQAAAAAMhaAKAAAAADAUzlEF8Lc84O0pN0+P/C6jUMvOzFLK1cz8LgMAAMBpCKoA/hY3Tw/9MGJ4fpdRqDVatFgSQRUAABQdDP0FAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACG4uaIlZrNZkVHR+vs2bNycXHR9OnT5ebmpujoaJlMJtWoUUNTpkyRiws5GQAAAACQm0OC6jfffKPs7GytXbtWu3bt0htvvCGz2ayRI0eqWbNmiomJ0bZt2/TUU085YvMAAAAAgALMIV2a/v7+ysnJkcViUVpamtzc3HT48GE1bdpUkhQcHKzdu3c7YtMAAAAAgALOIT2qJUqU0NmzZ9WhQwelpKRo2bJl2rdvn0wmkyTJy8tLqampd12Hq6tJPj4lHFEeABQ4HA8BAEBR4pCgunLlSrVs2VKjR4/WuXPn1L9/f5nNZtv89PR0eXt733UdOTlWXbmS4YjyANxHvr6l8ruEIoHjIQAAKGzu9j3SIUN/vb29VarUjY2WLl1a2dnZqlOnjhITEyVJ27dvV1BQkCM2DQAAAAAo4BzSozpgwABNmDBBffr0kdls1qhRo1S3bl1NnjxZ8+fPV0BAgNq1a+eITQMAAAAACjiHBFUvLy8tXLgwz/RVq1Y5YnMAAAAAgEKEG5kCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUAiqAAAAAABDIagCAAAAAAyFoAoAAAAAMBSCKgAAAADAUNwcteLly5fryy+/lNlsVnh4uJo2baro6GiZTCbVqFFDU6ZMkYsLORkAAAAAkJtDkmJiYqJ++OEHrVmzRvHx8frtt980a9YsjRw5UqtXr5bVatW2bdscsWkAAAAAQAHnkB7VnTt3qmbNmnr55ZeVlpamcePGaf369WratKkkKTg4WLt27dJTTz11x3W4uprk41PCEeUBQIHD8RAAABQlDgmqKSkpSk5O1rJly3TmzBkNHTpUVqtVJpNJkuTl5aXU1NS7riMnx6orVzIcUR6A+8jXt1R+l1AkcDwEAACFzd2+RzokqPr4+CggIEAeHh4KCAiQp6enfvvtN9v89PR0eXt7O2LTAAAAAIACzu45qt99951mzZqlrVu3qnv37oqLi7O70kcffVQ7duyQ1WrV+fPnde3aNbVo0UKJiYmSpO3btysoKOjvVw8AAAAAKHTsBtUZM2bo0Ucf1cSJE/Xmm29q8+bNdlf65JNPqnbt2urevbuGDh2qmJgYRUVFafHixerVq5fMZrPatWt3X3YAAAAAAFC42B36W6pUKT399NOKj4/XQw89JC8vr3ta8bhx4/JMW7Vq1X9fIQAAAACgSLHbo3rmzBnNnz/f9u/Zs2edURcAAAAAoIiy26M6YsSIXP8OHz7csRUBAAAAAIo0uz2qoaGhysjI0IEDB3T16lV16tTJGXUBAAAAAIoou0E1JiZGp0+f1uOPP66zZ89q0qRJzqgLAAAAAFBE2R36e/LkSb3//vuSpJCQEPXu3dvhRQEAAAAAii67PaqZmZm6du2aJOn69evKyclxeFEAAAAAgKLLbo9qv379FBYWpho1aigpKcl2USUAAAAAABzBblB9/PHHFRwcrNOnT8vPz88ZNQEAAAAAijC7Q38HDRqkjIwM1atXT3v37tWAAQOcUBYAAAAAoKiy26M6Y8YMvfrqqypTpozMZrPi4+OdURcAAAAAoIiy26N6+PBhPfnkk/rqq68UFBSkLVu2OKMuAAAAAEARZbdH9eLFi5Kkvn376tKlSw4vCAAAAABQtNntUQ0NDVW1atU0bNgwXb9+XZ07d3ZCWQAAAACAospuUI2KipKvr68kqXXr1po4caLDiwIAAAAAFF12g6okNWvWTJLUpEkTWSwWhxYEAAAAACja7J6j6u3trXXr1qlhw4Y6cOCAvLy8nFEXAAAAAKCIstujOnv2bCUlJSk2NlbHjh3TzJkznVEXAAAAAKCIstujOn78ePXo0UPR0dFydXV1Rk0AAAAAgCLMbo/quHHj9P3336tbt26KjY3ViRMnnFAWAAAAAKCoshtUAwMDNW7cOMXFxem3337TM888o+eff14HDx50Rn0AAAAAgCLG7tDfb775Rh9++KGOHz+uZ599VhMmTFB2drYGDx6sTZs2OaNGAAAAAEARYjeobtq0SX369FHTpk1zTR82bJjDigIAAAAAFF12g2rLli2VnJysjz76yDatc+fOevrppx1ZFwAAAACgiLIbVBctWqTQ0FBZrVZJkslkcnhRAAAAAICiy25Q9fPzU2RkpDNqAQAAAADAflDNzMzUiRMnbD2qkuTv7+/QogAAAAAARZfdoOrp6anJkyfbHptMJr333nsOLQoAAAAAUHTZDarx8fFKSUnR6dOn5efnpzJlyjijLgAAAABAEeVi7wlbtmxR7969tWzZMvXq1UsbN250Rl0AAAAAgCLKbo/qypUrlZCQIC8vL6Wlpal///4KCwtzRm0AAAAAgCLIbo+qyWSSl5eXJKlkyZLy9PR0eFEAAAAAgKLLbo9qlSpVNHv2bAUFBem7775TlSpVnFEXAAAAAKCIstujOnPmTFWuXFl79uxR5cqVNX36dGfUBQAAAAAoouwG1ezsbJnNZpnN5lz3UgUAAAAAwBHsBtXIyEhdunRJwcHBSk5O1vjx451RFwAAAACgiLJ7juqVK1c0ZswYSVJISIj69Onj8KIAAAAAAEWX3R7V6tWra//+/ZKkI0eOqGLFijKbzcrKynJ4cQAAAACAosduj+r+/fu1c+dOubu7y2w2S5LatWsnk8mkbdu2ObxAAAAAAEDRYjeofvLJJ86oAwAAAAAASfcQVNu2bZtnGj2pAAAAAABHsRtUK1SooLi4OGfUAgAAAACA/aDq4uIiDw8PZ9QCAAAAAID9oJqUlKTRo0fnmjZv3jyHFQQAAAAAKNrsBtU33njDCWUAAAAAAHCD3aDatGlTZ9QBAAAAAIAkySW/CwAAAAAA4FZ2g+qJEyecUAYAAAAAADfYDaoxMTHOqAMAAAAAAEn3cI7q6dOnNX/+/FzTIiMjHVYQAAAAAKBosxtUixUrJn9/f2fUAgAAAACA/aBarlw5denSxRm1AAAAAABgP6i++uqrSk5OzjWtYsWKDisIAAAAAFC02Q2q48ePlyQdO3ZMgYGBMplMWrt2rcMLAwAAAAAUTXaD6rp16yRJERERio+Pd3hBAAAAAICize7taW4ymUyOrAMAAAAAAEn30KPaq1cvSVJSUpJ69+4tSQz9BQAAAAA4jN2g+ud7qAIAAAAA4Eh2g6qbm5tiY2OVkpKidu3aqVatWqpUqZIzagMAAAAAFEF2z1GdPHmyunXrpqysLAUFBem1115zRl0AAAAAgCLKblDNzMxUixYtZDKZFBAQIE9PT2fUBQAAAAAoouwGVQ8PD+3YsUMWi0U//vijPDw8nFEXAAAAAKCIshtUp0+froSEBKWkpCguLk6vvvqqM+oCAAAAABRRdi+mZLFYNHbsWEmS1WrVp59+quPHj6tbt24KCgpyeIEAAAAAgKLFblAdNWqUTCaTpBtB9cSJE/rwww/l4+Pj6NoAAAAAAEWQ3aC6bt26XI9ffvllVaxY0WEFAQAAAACKNrvnqP7Zzd5VAAAAAAAcwW6Paq9evfIM/QUAAAAAwFHsBtX58+c7ow4AAAAAACTdQ1B1dXXVzJkzdezYMVWrVk3jx493Rl0AAAAAgCLK7jmqkyZNUlhYmNasWaMuXbpo4sSJzqgLAAAAAFBE2Q2qmZmZatu2rby9vRUSEqLs7Ox7WvHvv/+u1q1b69ixYzp58qTCw8PVp08fTZkyRRaL5W8XDgAAAAAonOwG1ZycHB05ckSSdOTIkXu66q/ZbFZMTIyKFSsmSZo1a5ZGjhyp1atXy2q1atu2bX+zbAAAAABAYXVPQ38nTJig4OBgTZw48Z6G/s6ZM0e9e/fWgw8+KEk6fPiwmjZtKkkKDg7W7t27/2bZAAAAAIDCyu7FlOrUqaMVK1bo1KlTqlatmnx8fO76/ISEBJUpU0atWrXSW2+9JenGbW1u9sR6eXkpNTXVbmGurib5+JS4h10AgMKP4yEAAChK7AbV999/X++9955q1KihX375RS+99JLCwsLu+PwNGzbIZDJpz549+umnnxQVFaXLly/b5qenp8vb29tuYTk5Vl25knGPuwEgv/j6lsrvEooEjocAAKCwudv3SLtB9YMPPtCmTZvk6empa9euqW/fvncNqu+//77t74iICE2dOlWxsbFKTExUs2bNtH37djVv3vy/3AUAAAAAQFFh9xzVsmXLytXVVZJUrFgxu0N/bycqKkqLFy9Wr169ZDab1a5du/96HQAAAACAosFuj6rValXnzp3VqFEj/d///Z+ys7M1evRoSdK8efPuumx8fLzt71WrVv3NUgEAAAAARYHdoDpkyBDb36GhoQ4tBgAAAACAOwbVjz766I4Lde7c2QGlAAAAAABwl6C6cOFChYaGymq15pp+8zYzAAAAAAA4wh2Dqp+fnyIjI51ZCwAAAAAAd77qLz2nAAAAAID8YPf2NAAAAAAAONMdh/4mJSXZbkPzZ/ZuSwMAAAAAwF91x6D6xhtvOLEMAAAAAABuuGNQbdq0qTPrAAAAAABAEueoAgAAAAAMhqAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUgioAAAAAwFAIqgAAAAAAQyGoAgAAAAAMhaAKAAAAADAUt/u9QrPZrAkTJujs2bPKysrS0KFDVb16dUVHR8tkMqlGjRqaMmWKXFzIyAAAAACAvO57UN20aZN8fHwUGxurlJQUdenSRQ8//LBGjhypZs2aKSYmRtu2bdNTTz11vzcNAAAAACgE7ntQbd++vdq1a2d77OrqqsOHD6tp06aSpODgYO3atctuUHV1NcnHp8T9Lg8ACiSOhwAAoCi570HVy8tLkpSWlqYRI0Zo5MiRmjNnjkwmk21+amqq3fXk5Fh15UrG/S4PwH3m61sqv0soEjgeAgCAwuZu3yMdcqLouXPn1K9fP4WFhSk0NDTX+ajp6eny9vZ2xGYBAAAAAIXAfQ+qly5d0sCBAzV27Fh1795dklSnTh0lJiZKkrZv366goKD7vVkAAAAAQCFx34PqsmXLdPXqVS1ZskQRERGKiIjQyJEjtXjxYvXq1UtmsznXOawAAAAAANzKZLVarfldxO2YzTmckwUUAL6+pfTDiOH5XUah1mjRYl28aP/cfgAAgILE6eeoAgAAAADwVxFUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACGQlAFAAAAABgKQRUAAAAAYCgEVQAAAACAoRBUAQAAAACG4pbfBRR2FotF8+bNVlLSL3J3d1d09GT5+VW2zd+5c7tWrnxbrq6u6tTpWT37bJd8rBa3ou2A/MF7r2Cj/Qo22q/gou0KNtovL3pUHWzHjq+VlZWl5cv/oSFDhuvNNxfY5mVnZ2vx4vmaP/9NvfnmW9q06UP9/vulfKsVue3YQdsB+WHHDt57BdmOHbRfQbZjB+1XUO3YQdsVZDt20H5/RlB1sAMHflSzZi0kSXXr1tPPP/9km3fixK+qVKmyvL295e7urvr1G+jf//4xnyrFn9F2QP7gvVew0X4FG+1XcNF2BRvtlxdB1cHS09Pl5VXS9tjFxUXZ2dm2eSVL/mdeiRJeSk9Pc3qNuD3aDsgfvPcKNtqvYKP9Ci7armCj/fIiqDqYl5eXMjIybI+tVqvc3NxumZdum5eRkfs/IfIXbQfkD957BRvtV7DRfgUXbVew0X55EVQdrF69Btq7d5ck6dChgwoIqG6bV62av86cOa2rV/+Q2WzWjz/+oLp16+dXqfgT2g7IH7z3Cjbar2Cj/Qou2q5go/3yMlmtVmt+F3E7ZnOOrlzJsP9Eg7t5Ba9jx5JktVo1YcIUHTnys65dy1BYWFfbFbwsFos6dXpW3br1zO+S8f/RdvfG17eUfhgxPL/LKNQaLVqsixdT87sMp+G9V7DRfgUb7Vdw0XYFW1FtP1/fUnecR1AF8LcQVB2vqAVVAABQNNwtqDrtPqoWi0VTp07VkSNH5OHhoRkzZqhq1arO2jwAAAAAoIBw2jmqW7duVVZWltatW6fRo0dr9uzZzto0AAAAAKAAcVpQ3b9/v1q1aiVJatiwoQ4dOuSsTQMAAAAAChCnDf1NS0vLdRllV1dXZWdn2y67/Gfu7q53HbMMwDgaLVqc3yUUehwPAQBAUeK0HtWSJUsqPf0/9/+xWCx3DKkAAAAAgKLLaUG1cePG2r59uyTpxx9/VM2aNZ21aQAAAABAAeK029PcvOrv0aNHZbVaNXPmTAUGBjpj0wAAAACAAsSw91EFAAAAABRNThv6CwAAAADAvSCoAgAAAAAMhaAKAAAAADAUgioAwNC2b9+udevWSZLWrVsns9mczxUBQMH2+OOP33X+F198ofPnzzupmqIrMzNTH3zwwT09NyEhQdu2bZMkjRs3Tj179tSPP/6oXr16aeDAgY4sM98QVA3q4sWLmjp1ap7pc+fOVUJCgvMLAvJJQkKC5s6d69Rtbt++XdHR0Xec/998sODvCw4OVq9evSRJy5cvl8ViyeeKCq+cnBwNGjRIwcHB+vDDD+9pmSNHjmjfvn0Orgz36r89ZnI8w+289957SktLy+8yCr2LFy/e8/uva9euatu2rSRp586dWr9+vbKzs/Xggw8qLi7OkWXmG7f8LgC35+vre9ugCudIS0vTxIkTlZqaqpSUFPXo0UN169bVq6++Ki8vL5UtW1aenp6aPXu24uPjtXnzZplMJnXs2FH9+vXL7/LhYDc/WHr06JHfpRRK169f1/jx45WcnCyz2ax27dopNTVVVatW1cWLFzVq1ChVr15d5cuX13PPPac//vhDzz//PD/i3QcXL15USkqK7b7n9+Lzzz9XuXLl1KRJEwdWBkfheGZcCQkJ2rBhgywWiyIiIvTuu+/KxcVFjz76qMaMGaPLly9rzJgxysrKkr+/v/bu3asvvvjituvKycnR5MmTlZSUpMqVKysrK0uSdPToUc2ePVsWi0VXr17VpEmTdPXqVf3000+KiorS6tWrtW7dOr7nOMiyZcuUlJSkN998U4cOHVJmZqauXLmil19+WSEhIXrmmWdUrVo1eXh4yN/fX+XKldORI0d09epVvfDCC7p48aIuXLigRYsWacSIEfm9O/cdQfUvSkhI0PHjxzVmzBhlZmaqQ4cOGjRokD766CO5uLiocePGioqK0rlz5zR58mRlZmbK09NT06dPV05OjoYOHSofHx8FBwdr8ODBedZ/5swZRUZGav369frXv/6lpUuXqkyZMjKbzQoICMiHPS5aTp48qU6dOunpp5/W+fPnFRERIS8vL73++uuqUaOGFixYoPPnzyspKUmffvqpVq9eLZPJpAEDBqhly5a00d9wu5Dy73//WwMHDtTly5cVHh6uXr16qU2bNtqyZYs8PT01d+5cBQQEqFKlSpo7d67c3d3Vs2dPvfPOO2ratKmOHDkik8mkJUuWqFSpUrfd7rFjxzRhwgQVL15cxYsXV+nSpSVJq1at0ueff67s7GyVKlVKixcvzvXB0r9/f02cOFEpKSmSpEmTJqlWrVpOe70Ko7Vr16pSpUpasGCBjh49qt27dys1NVU9evTQ0qVLtWDBAl24cEGRkZF67rnntHnzZoWGhuZ32YXC5MmTdeLECcXExKh27doKCAjI9Z769ddftXfvXlksFnXq1EkdOnTQhx9+KHd3dz3yyCOqX79+nnUmJiZqxYoVcnd315kzZ9SxY0cNHTr0tl+QGzdurKeeekqNGjXSyZMn1bx5c6WmpurAgQPy9/dXbGzsbT9XK1SokA+vlrHNmzdPhw4dUnp6ugIDAzVr1izt379fc+bMkZubm7y9vTV37txcx7Nhw4bddl2hoaF5jqUlSpRQTEyMfvvtN6WkpCg4OFgjR45UdHS03NzclJycrKysLHXs2FFfffWVzp07pyVLlqhKlSqaN2+e9u3bJ6vVqgEDBqhDhw5OfnUKDm9vb82aNUt9+vTRhg0bVLx4cY0dO1a7du3SN998o7Zt2+q5557Trl27tGvXrjuuZ/v27crMzNT69euVnJysf/3rX5KkpKQkRUVFqVatWvr444+VkJCgGTNmqHbt2po6dapOnTrF9xwHGjJkiI4eParGjRurSZMmatasmb7//nstXrxYISEhysjI0EsvvaQ6depo8eLFkqSpU6fqiy++0Ntvv63ExEStXbu2UIZUiaB6XyUkJGjy5Mlq2LChVq9erezsbM2ZM0cRERFq3bq19uzZo7lz52rUqFG6ePGiNmzYIA8PD7vrjY2N1QcffCAfHx+9+OKLTtgTlCtXTu+++64+//xzlSxZUtnZ2bpw4YJq1KghSXr00Uf16aef6ujRo0pOTtaAAQMkSX/88YdOnTrFAfxvuF1IcXNz0zvvvKOzZ8/qxRdftA0DvZ1bh7EtWrRInTp10uTJkzV69Ght375dnTp1uu1yCxcu1IgRI/T444/rrbfe0vHjx2WxWHTlyhWtXLlSLi4uGjRokA4ePGj7YBk2bJhiY2PVvHlz9enTRydOnND48eO1Zs0ah7w2RcXx48cVHBwsSapZs6YOHTqkS5cu5XpO5cqV5eXlpaSkJH388cdasmRJfpRa6EyZMkWRkZHy9fW1Tbv1PdW6dWutWrVK5cuXV0JCgsqXL68uXbqoXLlytw2pNyUnJ2vTpk3KyspSq1atNHTo0Nt+QW7cuLHOnj2rd999V76+vmratKk++OADTZ48WW3bttXVq1dv+7k6b948h782BYnZbFa5cuX0j3/8w/ajwvnz57V161Y99dRTGjRokL788ktdvXo11/HsTtLT0/McSxs0aKCGDRuqR48eyszMtAVVSapUqZJmzJihmJgYnTlzRitWrNCiRYv05Zdfyt/fX2fOnNHatWuVmZmpnj176vHHH5e3t7eTXp2Cxd/fX6dOndLly5dt3wHT09N1+vRpHTt2TF26dJEkBQUF3XU9v/zyi+09WrFiRduPOw8++KCWLFmiYsWKKT09XSVLlsy1HN9znMPX11dLly7VP//5T5lMJmVnZ9vm+fv752Nl+Yugeh9YrVZJ0qxZsxQXF6e5c+eqYcOGslqtOnr0qJYvX663335bVqtV7u7ukiQ/P797CqmXLl1SyZIl9cADD0iSGjVq5LgdgU1cXJwaNmyoPn36aO/evfrmm2/00EMPKSkpSdWrV9e///1vSVJAQICqV6+ut99+WyaTSStXrlTNmjXzufqC7XYhpU6dOjKZTPL19dX169fzLHPzPSjlPaDXqVNHklShQgVlZmbecbu3fog3btxYx48fl4uLi9zd3RUZGakSJUrot99+y/XhId34EN+7d6+2bNkiSbp69epf2GvcKjAwUAcPHlRISIhOnz6t+fPnq3PnzpIkk8lkO0e1Z8+eWrp0qcqXL68yZcrkY8WF263vqfnz52v+/Pm6dOmSWrVqdc/rqFmzptzc3OTm5qZixYpJuvMXZB8fH1WsWFGSVKJECVWvXl2SVKpUKWVmZt7xcxX/YTKZdPnyZduxKyMjQ2azWUOGDNGyZcvUv39/lS9fXvXr17cNAbXnz8dSHx8fHTx4UHv37lXJkiVzrefmc729vW2BxtvbW1lZWTp69KgOHz6siIgISVJ2draSk5MJqnfg4uIiPz8/VahQQXFxcXJ3d1dCQoJq166tkydP6ocfflDt2rX1448/3nU9AQEB+uSTT9S/f3+dP3/edqGk1157TXPnzlVgYKAWLVqks2fPSrrxf8hqtfI9x8FcXFxksVi0cOFC9ejRQ61bt9aGDRtyXSPAxaXoXlKIoPoXeXp66uLFi5Kkw4cPS5LWr1+vV199VZ6enho0aJB++OEHBQQEaODAgWrcuLGOHTtmu+DEvf6n8/HxUWpqqi5fvqwyZcro4MGDeuihhxyzU7B58sknNXXqVH388cfy8fGRq6urYmJiNGHCBJUoUULu7u4qX768Hn74YbVo0ULh4eHKyspS/fr1Vb58+fwuv0C7W0i5lYeHhy5cuCA/Pz/9/PPPCgwMlJT3vWUyme5puwEBAfrhhx8UHBysQ4cOSZJ+/vlnbd26VR988IGuXbumrl27ymq12j5Ybi737LPPKjQ0VL///jsXJbkPevfurQkTJqhv377KycnR888/bxtaHRQUpBdffFHvvfeeQkJCNG3aNMXGxuZzxYXbzfdUVlaWPvvsM82fP19Wq1WdOnVSp06dcv14cCe3ex/e7Qvy3dzpcxX/kZiYqKpVq+qNN97Q5cuX9cUXX8hqterjjz9Wly5dFBUVpeXLl2v9+vXq2rXrPV2g7M/tkpCQoFKlSmnatGk6efKk1q9fb/vR8G5tGBAQoGbNmmn69OmyWCxasmSJ/Pz8/t4OF3JlypTRgAEDFBERoZycHFWqVEkdOnTQ4MGDNW7cOG3ZskUPPvig3Nzu/LU+JCRE+/fvV48ePVSxYkVbB8izzz6rl156SWXLltVDDz1kO9Y2atRI48aNU1xcHN9zHKhs2bIym8365Zdf9Nprr2n58uWqUKGCrR2KOoLqX9SqVSutWbNG4eHheuSRR+Tl5aVatWqpe/fueuCBB1S+fHk1aNBAUVFRmjp1qjIzM3X9+nVNnDjxv9qOm5ubZs2apUGDBql06dJ3PQjh/mnevLk+++yzXNPef/99LVu2TGXKlNGCBQtsv+K/8MILeuGFF/KjzELpbiHlVi+88IJefPFFVapU6b78Ej9lyhSNGjVK77zzjsqUKSNPT09VrVpVxYsXV9euXeXh4SFfX19duHBBjRo1ktlsVmxsrIYMGaKJEydq/fr1SktLu+vwOdwbT0/POw7lnDNnju3vm1/Y7N1mAfeHh4eHSpcurbCwMJUuXVqPP/64KlasqLp16+r1119XYGCgmjdvfs/ru9MXZHv+7udqUVCvXj0dPnxYPXv2lIeHhypXrqwLFy6oXr16io6Otv3gOm3aNNsX5djYWI0dO/aet9GiRQtFRkZq//79Kl68uKpWraoLFy7YXa5Nmzb69ttv1adPH2VkZCgkJCTPcFPc0LVrV9vfYWFhCgsLyzX/22+/1YgRI1S/fn3t3r3b1oFyJ1FRUXmmPf/883r++efzTB81apRGjRolie85juTp6amNGzfecf6XX35p+3v48OG2v2+ej9ysWTM1a9bMcQXmM5P11jFzAO7os88+07Jly1SiRAmVKlVKs2fPtv0iCcC5vv/+e02ZMkUjR460Xa4fAIqSmxcBdHV1lcVi0cSJE/XNN98oMTExz3NnzpypypUr50OVwF9HUM1nNy/5/WeRkZGcjwrcZ1lZWRo0aFCe6f7+/po2bVo+VAQUHm+++SZfkAuwAwcO3HYYfYcOHdSnT598qAhAUUdQBQAAAAAYStG9jBQAAAAAwJAIqgAAAAAAQ+ESsgAAw0tMTNTatWu1YMEC27S5c+cqICAg15Uxcf+kpaXptdde0/nz52U2mzmXGwDgVARVAACQx8qVK/XYY48pNDQ0v0sBABRBBFUAQIGWk5OjmJgY/fbbb0pJSVFwcLBGjhyp6OhodezYUcHBwYqKilJWVpYWLFig2rVr67nnntOkSZNkNpsVHBysbt26acyYMYqPj9fmzZtlMpnUsWNH9evXL9d6tm/frk8//VSzZ89WXFycPvnkE7m5uSkoKEhjx47V4sWLtXnzZvn6+iojI0Nz5sxRhQoVNHHiRKWmpiolJUU9evRQnz59FBERoalTpyowMFBr1qzRpUuX1LRpU1vP8d69e9W/f38dOHBA27Zt01tvvaWSJUvq0qVLCgkJ0ZgxY2yvwfXr1zV+/HglJyfLbDZr8uTJ+vDDD/Xzzz8rKSlJjzzyiMLDw1W6dGm98cYb8vT0lI+Pj2bOnClvb2/VrVvXdqX5w4cPa9OmTTp06JDMZrMGDBiga9euaeTIkWrRooXatGmjLVu2yNPT09arHRoaqgkTJuj06dO2+x937NhRERERunbtmtzc3FSiRAm9+eabKlGiRH79VwEAFCAEVQBAgbB3715FRETYHp8+fVojRozQuXPn1LBhQ/Xo0UOZmZm2oHrTnj17lJSUpCpVqkiSypQpoyNHjshisejrr79WhQoVJElJSUn69NNPtXr1aplMJg0YMEAtW7a8bS1HjhzRli1btHbtWrm5uWn48OH66quvJEkDBgxQeHi44uLitGvXLjVp0kSdOnXS008/rfPnzysiIsLu7T4yMzO1dOlSlS1bVpK0adMmjRkzRi1btlRCQoKOHz+e6/lr165VpUqVtGDBAh09elS7d+/WtGnTdObMGUVGRio+Pl5Wq1Vt27bVmjVrVL58eb377rtaunSpoqKiVLp0acXHx0uSevbsKelG+DWbzVq5cqUuXryo3r17a+vWrbetd926dXrggQcUGxurtLQ0de3aVc2bN5ckzZkzR4GBgRoyZIhOnjyp2rVr33XfAQCQCKoAgAKiefPmec5RlSQfHx8dPHhQe/fuVcmSJZWVlWV7TlZWluLi4jR8+HBt3LjRNj0oKEj79+/X5s2bFRoaqt9//11Hjx5VcnKyBgwYIEn6448/dOrUKUlSbGysVqxYoStXruiRRx7R8ePH1aBBA7m7u9vW98svv0i6MWR28+bN+umnn7Ry5UqVK1dO7777rj7//HOVLFlS2dnZtjqioqJUvHhxXbhwQc8884xt+pIlS9S/f3/NmDFDkjR8+HDFxMRo2rRpcnFxUUhISK7X5vjx4woODpYk1axZUzVr1szz+qWkpKhkyZIqX768JKlJkyaaP3/+HV9vLy8vW9j09fWVl5eXfv/999s+99ixY3rsscckSSVLllRgYKBOnz5t20eTyaRLly7Jz8/vjtsDAOBWXPUXAFCgJSQkqFSpUpo3b54GDhyo69ev6+YtwpctW6YBAwaoePHiuZbp2LGj3n//fbm5ual06dKSpICAAFWvXl3vvfee4uPj1bVrV1vgGzt2rOLj4zV27Fjbcw8cOKDs7GxZrVbt27dP/v7+km70qL7//vt666239PbbbysuLk4NGzbU3Llz1b59e916+/I5c+YoPj7eFo6lG6HzzJkzatOmjW2at7e30tLStHr1ar344ot5XoPAwEAdPHhQ0o2e5tGjR+d5zgMPPKC0tDRduHBBkvTtt9+qWrVqslgsMplMeZ4fFBSkffv2SZKSk5OVnp6uBx544LZtEBgYqO+++07SjYswHT161BZK58yZow8++EDdu3fXpk2bbrs8AAB/Ro8qAKBAa9GihSIjI7V//34VL15cVatWtYUxPz8/PfHEE0pMTMy1TI0aNZSUlKTRo0crJSVFkvTwww+rRYsWCg8PV1ZWlurXr2/rffyzWrVqqUOHDgoPD5fFYtGjjz6qkJAQ/fzzz1q5cqU++eQTpaamauDAgSpfvrymTp2qjz/+WD4+PnJ1dc3V6/tnZ8+e1YoVK2yPrVarJkyYoFdeeUXlypW77TK9e/fWhAkT1LdvX+Xk5GjChAl5nmMymTRjxgwNHz5cJpNJpUuX1qxZsxQREaEWLVrkeX5ERITGjRunXr16KSsrS/PmzZOrq6sk6ZVXXpGLi4uOHTsmPz8/LV26VJMnT1Z4eLgyMzM1bNgw27DlqKgoFStWTOnp6Zo1a9Yd9xsAgFuZrLf+tAsAAPBfiIiIsJ3fCgDA/cLQXwAA8JcNGjQov0sAABRC9KgCAAAAAAyFHlUAAAAAgKEQVAEAAAAAhkJQBQAAAAAYCkEVAAAAAGAoBFUAAAAAgKH8P9MCGKmtea5yAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 1152x504 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(16, 7))\n",
    "\n",
    "nan_relation_bar = (\n",
    "    sns\n",
    "    .barplot(\n",
    "        data = (\n",
    "            df_users.isnull().sum() * 100 / len(df_users)\n",
    "        ).reset_index(),\n",
    "        x = 'index',\n",
    "        y = 0,\n",
    "        palette = \"flare\"\n",
    "    )\n",
    ")\n",
    "nan_relation_bar.set(\n",
    "    title = 'Процент пропусков в данных', \n",
    "    xlabel = 'Наименования столбцов', \n",
    "    ylabel = 'Процент пропусков'\n",
    ")\n",
    "\n",
    "for p in nan_relation_bar.patches:\n",
    "    nan_relation_bar.annotate(\n",
    "        format(p.get_height(), '.1f'), \n",
    "        (p.get_x() + p.get_width() / 2., p.get_height()), \n",
    "        ha = 'center', va = 'center', \n",
    "        xytext = (0, 7), \n",
    "        textcoords = 'offset points'\n",
    "    )\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**\n",
    "\n",
    "Таблица df_calls:\n",
    "- у поля call_date нужно изменить тип данных.\n",
    "\n",
    "Таблица df_internet\n",
    "- у поля session_date нужно изменить тип данных.\n",
    "\n",
    "Таблица df_messages\n",
    "- у поля message_date нужно изменить тип данных.\n",
    "\n",
    "Таблица df_users\n",
    "- у поля churn_date нужно изменить тип данных;\n",
    "- у поля reg_date нужно изменить тип данных;\n",
    "- у поля churn_date больше 95% пропусков, в описании задания сказанно, если значение пропущено, то тариф ещё действовал на момент выгрузки данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Предобработка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Замена типа данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Функция, изменяющая тип данных у столбцов указанных в словаре"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_dict_type = {\n",
    "    'df_calls': ['call_date'], \n",
    "    'df_internet': ['session_date'], \n",
    "    'df_messages': ['message_date'], \n",
    "    'df_users': ['churn_date', 'reg_date']\n",
    "}\n",
    "\n",
    "def replace_type_all_df(dict_type, name_type):\n",
    "    for df in df_list:\n",
    "        for key, value in dict_type.items():\n",
    "            \n",
    "            if df.name == key:\n",
    "                for column_name in value:\n",
    "                    if name_type == 'date':\n",
    "                        df[column_name] = pd.to_datetime(df[column_name], format='%Y-%m-%d')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "replace_type_all_df(df_dict_type, 'date')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим результат"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Таблица - df_calls\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 202607 entries, 0 to 202606\n",
      "Data columns (total 4 columns):\n",
      " #   Column     Non-Null Count   Dtype         \n",
      "---  ------     --------------   -----         \n",
      " 0   id         202607 non-null  object        \n",
      " 1   call_date  202607 non-null  datetime64[ns]\n",
      " 2   duration   202607 non-null  float64       \n",
      " 3   user_id    202607 non-null  int64         \n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 6.2+ MB\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_internet\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149396 entries, 0 to 149395\n",
      "Data columns (total 5 columns):\n",
      " #   Column        Non-Null Count   Dtype         \n",
      "---  ------        --------------   -----         \n",
      " 0   Unnamed: 0    149396 non-null  int64         \n",
      " 1   id            149396 non-null  object        \n",
      " 2   mb_used       149396 non-null  float64       \n",
      " 3   session_date  149396 non-null  datetime64[ns]\n",
      " 4   user_id       149396 non-null  int64         \n",
      "dtypes: datetime64[ns](1), float64(1), int64(2), object(1)\n",
      "memory usage: 5.7+ MB\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_messages\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123036 entries, 0 to 123035\n",
      "Data columns (total 3 columns):\n",
      " #   Column        Non-Null Count   Dtype         \n",
      "---  ------        --------------   -----         \n",
      " 0   id            123036 non-null  object        \n",
      " 1   message_date  123036 non-null  datetime64[ns]\n",
      " 2   user_id       123036 non-null  int64         \n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 2.8+ MB\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_tariffs\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 2 entries, 0 to 1\n",
      "Data columns (total 8 columns):\n",
      " #   Column                 Non-Null Count  Dtype \n",
      "---  ------                 --------------  ----- \n",
      " 0   messages_included      2 non-null      int64 \n",
      " 1   mb_per_month_included  2 non-null      int64 \n",
      " 2   minutes_included       2 non-null      int64 \n",
      " 3   rub_monthly_fee        2 non-null      int64 \n",
      " 4   rub_per_gb             2 non-null      int64 \n",
      " 5   rub_per_message        2 non-null      int64 \n",
      " 6   rub_per_minute         2 non-null      int64 \n",
      " 7   tariff_name            2 non-null      object\n",
      "dtypes: int64(7), object(1)\n",
      "memory usage: 256.0+ bytes\n",
      "--------------------------------------------------------------\n",
      "\n",
      "Таблица - df_users\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      " #   Column      Non-Null Count  Dtype         \n",
      "---  ------      --------------  -----         \n",
      " 0   user_id     500 non-null    int64         \n",
      " 1   age         500 non-null    int64         \n",
      " 2   churn_date  38 non-null     datetime64[ns]\n",
      " 3   city        500 non-null    object        \n",
      " 4   first_name  500 non-null    object        \n",
      " 5   last_name   500 non-null    object        \n",
      " 6   reg_date    500 non-null    datetime64[ns]\n",
      " 7   tariff      500 non-null    object        \n",
      "dtypes: datetime64[ns](2), int64(2), object(4)\n",
      "memory usage: 31.4+ KB\n",
      "--------------------------------------------------------------\n",
      "\n"
     ]
    }
   ],
   "source": [
    "get_round_all_df('info')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**\n",
    "\n",
    "Заменили тип данных у всех полей с датами, в остальных случаях - все в порядке."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Поиск и исправление ошибок в данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим какой процент звонков имееет длительность 0.0 минут"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "19.551644316336553\n"
     ]
    }
   ],
   "source": [
    "print((len(df_calls[df_calls['duration'] == 0.00]) / len(df_calls)) * 100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На наш взгляд это действительно пропущенные звонки. Заменять их каким то другим значение точно не нужно. Избавляться от них тоже не имеет смысла."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В таблице df_internet есть столбец unnamed: 0. Он полностью дублирует индекс. Удалим этот столбец"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_internet.drop('Unnamed: 0', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**\n",
    "\n",
    "На наш взгляд в предоставленных датасетах отсутствуют критические ошибки. А те которые есть, мы исправили выше."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Количество сделанных звонков и израсходованных минут разговора по месяцам для каждого пользователя"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим в df_calls столбец с названием месяца"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_calls['month'] = df_calls['call_date'].dt.month_name()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заранее округлим в большую сторону значение duration для дальнейших расчетов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_calls['duration_round'] = np.ceil(df_calls['duration'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создадим функцию для генерации сводной таблицы "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "def group_df(df_name, list_index, value, agfunc):\n",
    "    grouped_df = df_name.pivot_table(\n",
    "        index=list_index,\n",
    "        values=value,\n",
    "        aggfunc=agfunc\n",
    "    ).reset_index()\n",
    "    \n",
    "    return grouped_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_calls_pivot = group_df(df_calls, ['user_id', 'month'], 'duration_round', ('count', 'sum'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверяем результат"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>August</td>\n",
       "      <td>52</td>\n",
       "      <td>408.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>December</td>\n",
       "      <td>46</td>\n",
       "      <td>333.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>July</td>\n",
       "      <td>47</td>\n",
       "      <td>340.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>June</td>\n",
       "      <td>43</td>\n",
       "      <td>172.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>May</td>\n",
       "      <td>22</td>\n",
       "      <td>159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000</td>\n",
       "      <td>November</td>\n",
       "      <td>43</td>\n",
       "      <td>338.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000</td>\n",
       "      <td>October</td>\n",
       "      <td>57</td>\n",
       "      <td>350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1000</td>\n",
       "      <td>September</td>\n",
       "      <td>58</td>\n",
       "      <td>466.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1001</td>\n",
       "      <td>December</td>\n",
       "      <td>63</td>\n",
       "      <td>414.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1001</td>\n",
       "      <td>November</td>\n",
       "      <td>59</td>\n",
       "      <td>430.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      month  count    sum\n",
       "0     1000     August     52  408.0\n",
       "1     1000   December     46  333.0\n",
       "2     1000       July     47  340.0\n",
       "3     1000       June     43  172.0\n",
       "4     1000        May     22  159.0\n",
       "5     1000   November     43  338.0\n",
       "6     1000    October     57  350.0\n",
       "7     1000  September     58  466.0\n",
       "8     1001   December     63  414.0\n",
       "9     1001   November     59  430.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_calls_pivot.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  Количество отправленных сообщений по месяцам для каждого пользователя"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим в df_messages столбец с названием месяца"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_messages['month'] = df_messages['message_date'].dt.month_name()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_messages_pivot = group_df(df_messages, ['user_id', 'month'], 'id', 'count')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверяем результат"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>August</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>December</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>July</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>June</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>May</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000</td>\n",
       "      <td>November</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000</td>\n",
       "      <td>October</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1000</td>\n",
       "      <td>September</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1002</td>\n",
       "      <td>August</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1002</td>\n",
       "      <td>December</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      month  id\n",
       "0     1000     August  81\n",
       "1     1000   December  70\n",
       "2     1000       July  75\n",
       "3     1000       June  60\n",
       "4     1000        May  22\n",
       "5     1000   November  58\n",
       "6     1000    October  73\n",
       "7     1000  September  57\n",
       "8     1002     August  13\n",
       "9     1002   December  12"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_messages_pivot.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Объем израсходованного интернет-трафика по месяцам для каждого пользователя"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим в df_internet столбец с названием месяца"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_internet['month'] = df_internet['session_date'].dt.month_name()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заранее округлим в большую сторону значение mb_used для дальнейших расчетов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_internet['mb_used_round'] = np.ceil(df_internet['mb_used'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_internet_pivot = group_df(df_internet, ['user_id', 'month'], 'mb_used_round', 'sum')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Переведем мегабайты в гигабайты и округлим вверх"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_internet_pivot['gb_used_round'] = np.ceil(df_internet_pivot['mb_used_round'] / 1024)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Удалим столбец с мегабайтами из сводной таблицы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_internet_pivot.drop('mb_used_round', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверяем результат"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>gb_used_round</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1000</td>\n",
       "      <td>August</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1000</td>\n",
       "      <td>December</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1000</td>\n",
       "      <td>July</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1000</td>\n",
       "      <td>June</td>\n",
       "      <td>23.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1000</td>\n",
       "      <td>May</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>1000</td>\n",
       "      <td>November</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1000</td>\n",
       "      <td>October</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1000</td>\n",
       "      <td>September</td>\n",
       "      <td>15.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1001</td>\n",
       "      <td>December</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1001</td>\n",
       "      <td>November</td>\n",
       "      <td>19.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id      month  gb_used_round\n",
       "0     1000     August           14.0\n",
       "1     1000   December           10.0\n",
       "2     1000       July           14.0\n",
       "3     1000       June           23.0\n",
       "4     1000        May            3.0\n",
       "5     1000   November           15.0\n",
       "6     1000    October           15.0\n",
       "7     1000  September           15.0\n",
       "8     1001   December           14.0\n",
       "9     1001   November           19.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(df_internet_pivot.head(10))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Помесячная выручка с каждого пользователя"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для расчета ежемесячной выручки по каждому пользователю, нужно объединить все сводные таблицы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# создаем массив из таблиц для объединения\n",
    "dfs = [df_calls_pivot, df_messages_pivot, df_internet_pivot]\n",
    "\n",
    "df_pivot = reduce(lambda left,right: pd.merge(left,right, how='outer', on=['user_id', 'month']), dfs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# переименуем столбцы \n",
    "df_pivot.rename({'count': 'calls', 'sum': 'durations', 'id': 'messages', 'gb_used_round': 'gb_used'}, axis=1, inplace=True)\n",
    "\n",
    "# заменим все NaN на 0 \n",
    "df_pivot.fillna(0, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим к нашей таблице, название тарифа и город"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "df_pivot = pd.merge(\n",
    "    df_pivot, df_users[['user_id', 'tariff', 'city']], \n",
    "    how='left', \n",
    "    on='user_id'\n",
    ")\n",
    "\n",
    "# добавим все стобцы из таблицы df_tariffs к нашей сводной таблице\n",
    "df_pivot = pd.merge(\n",
    "    df_pivot, df_tariffs,\n",
    "    how='left', \n",
    "    left_on='tariff', \n",
    "    right_on='tariff_name'\n",
    ")\n",
    "# удалим дубликат столбца с тарифом\n",
    "df_pivot.drop('tariff_name', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Переведем включенные в тариф мегабайты в гигабайты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pivot['gb_per_month_included'] = df_pivot['mb_per_month_included'] / 1024\n",
    "\n",
    "# удалим столбец с мегабайтами\n",
    "df_pivot.drop('mb_per_month_included', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создадим функцию для расчета ежемесячных затрат для каждого пользователя"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# вложенная функция\n",
    "def cost_condition(value, value_included, penalty):\n",
    "    if value > value_included:\n",
    "        return (value - value_included) * penalty\n",
    "    \n",
    "    else:\n",
    "        return 0\n",
    "\n",
    "def calculate_cost(row):  \n",
    "    # создадим словарь для обхода циклом \n",
    "    value_dict = {\n",
    "        'duration': [row['durations'], row['minutes_included'], row['rub_per_minute']],\n",
    "        'messages': [row['messages'], row['messages_included'], row['rub_per_message']],\n",
    "        'gb_used': [row['gb_used'], row['gb_per_month_included'], row['rub_per_gb']]\n",
    "    }\n",
    "    total = 0\n",
    "\n",
    "    # проходим циклом по словарю и расчитываем затраны сверх тарифных лимитов \n",
    "    for key, value in value_dict.items():\n",
    "        val = cost_condition(value[0], value[1], value[2])\n",
    "        \n",
    "        total = val + total\n",
    "        \n",
    "    # если пользователь не превысил включенные в тариф лимиты, выводим только ежемесячную стоимость\n",
    "    if total == 0:\n",
    "        return row['rub_monthly_fee']\n",
    "    \n",
    "    # если пользователь превысил включенные в тариф лимиты, выводим ежемесячную \n",
    "    # стоимость и то что нужно оплатить сверх тарифа \n",
    "    else:\n",
    "        return total + row['rub_monthly_fee']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вызываем функцию и передаем в нее необходимые значения"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pivot['payment'] = df_pivot.apply(calculate_cost, axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выведем графики и подведем итоги"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x360 with 3 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axes = plt.subplots(1, 3, figsize=(17, 5))\n",
    "\n",
    "tariff_pie = df_users.groupby('tariff')['user_id'].count().plot(\n",
    "    kind='pie',\n",
    "    y='count', \n",
    "    autopct=\"%.1f%%\",\n",
    "    textprops={'color':'w', 'weight':'bold'},\n",
    "    title='Соотношение пользователей по тарифам',\n",
    "    legend=True,\n",
    "    ax=axes[0]\n",
    ")\n",
    "tariff_pie.set_ylabel('')\n",
    "\n",
    "tariff_mean_bar = df_pivot.groupby('tariff')['payment'].mean().plot(\n",
    "    x='tariff',\n",
    "    y='payment', \n",
    "    kind='bar',\n",
    "    title='Средний доход по тарифам',\n",
    "    color=['steelblue', 'darkorange'],\n",
    "    ax=axes[1]\n",
    ")\n",
    "tariff_mean_bar.set_xlabel('')\n",
    "tariff_mean_bar.set_yticklabels([])\n",
    "\n",
    "# выводим значения столбцов на график\n",
    "for p in tariff_mean_bar.patches:\n",
    "    tariff_mean_bar.annotate(int(p.get_height()), (p.get_x() + 0.15, p.get_height()))\n",
    "\n",
    "\n",
    "tariff_sum_bar = df_pivot.groupby('tariff')['payment'].sum().plot(\n",
    "    x='tariff',\n",
    "    y='payment', \n",
    "    kind='bar',\n",
    "    title='Суммарный доход по тарифам',\n",
    "    color=['steelblue', 'darkorange'],\n",
    "    ax=axes[2]\n",
    ")\n",
    "tariff_sum_bar.set_xlabel('')\n",
    "tariff_sum_bar.set_yticklabels([])\n",
    "\n",
    "# выводим значения столбцов на график\n",
    "for p in tariff_sum_bar.patches:\n",
    "    tariff_sum_bar.annotate(int(p.get_height()), (p.get_x() + 0.1, p.get_height()))\n",
    "\n",
    "    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сделаем разбивку по городам на 2 категории: Москва и другие."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_pivot['city_cat'] = df_pivot['city'].where(\n",
    "    df_pivot['city'] == \"Москва\", \"Другие\"\n",
    ")\n",
    "\n",
    "# выведем средний доход в разрезе города и тарифа\n",
    "qwer = df_pivot.groupby(['city_cat', 'tariff'])['payment'].mean().plot(\n",
    "    kind='barh',\n",
    "    x='city_cat',\n",
    "    y='payment',\n",
    "    figsize=(17, 5),\n",
    "    color=['steelblue', 'darkorange'],\n",
    "    title='Средний доход в разрезе тарифов и городов'\n",
    ")\n",
    "qwer.set_xlabel('Средний доход')\n",
    "qwer.set_ylabel('Город / Тариф')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**\n",
    "\n",
    "Нам удалось составить единую сводную таблицу по всем данным, и сгруппировать их по пользователям и месяцам. Так же мы расчитали платежи и переплаты для каждого пользователя, что бы в дальнейшем аппелировать этими данными при анализе. \n",
    "\n",
    "На текущем этапе нам известно следующее - средний платеж по тарифу Smart, с учетом всех переплат за израсходованные лимиты, ниже чем у тарифа Ultra. Но пользователей у Smart в два раза больше, и прибыль соотвественно выше.\n",
    "\n",
    "Средний доход по Москве и остальным городам почти одинаковый"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Анализ данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создадим отдельный датафрейм без лишней информации по тарифам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_pivot_short = df_pivot[['user_id', 'month', 'calls', 'durations', 'messages', 'gb_used', 'tariff']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создадим функцию для вывода диаграмм размаха в сравнении по тарифам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_plot(column, plot_type):    \n",
    "    if plot_type == 'box':\n",
    "        df_pivot_short.query('tariff == \"smart\"').plot(\n",
    "            y=column,\n",
    "            kind='box',\n",
    "            ylim=(-5, max(df_pivot_short.query('tariff == \"ultra\"')[column])+10),\n",
    "            legend=False,\n",
    "            grid=True,\n",
    "            ax=axes[0]\n",
    "        )\n",
    "        axes[0].set_title('Тариф smart')\n",
    "\n",
    "        df_pivot_short.query('tariff == \"ultra\"').plot(\n",
    "            y=column,\n",
    "            kind='box',\n",
    "            ylim=(-5, max(df_pivot_short.query('tariff == \"ultra\"')[column])+10),\n",
    "            legend=False,\n",
    "            grid=True,\n",
    "            ax=axes[1]\n",
    "        )\n",
    "        axes[1].set_title('Тариф ultra')\n",
    "        \n",
    "    elif plot_type == 'distr':\n",
    "        sns.distplot(\n",
    "            df_pivot_short.query('tariff == \"smart\"')[column], \n",
    "            fit=norm, \n",
    "            kde=False,\n",
    "            ax=axes[0]\n",
    "\n",
    "        ).get_figure()\n",
    "        axes[0].set_title('Тариф smart')\n",
    "\n",
    "\n",
    "        sns.distplot(\n",
    "            df_pivot_short.query('tariff == \"ultra\"')[column], \n",
    "            fit=norm, \n",
    "            kde=False,\n",
    "            ax=axes[1],\n",
    "\n",
    "        ).get_figure()\n",
    "        axes[1].set_title('Тариф ultra')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Кол-во потраченных минут на диаграмме размаха по тарифам:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Кол-во отправленных сообщений на диаграмме размаха по тарифам:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Кол-во потраченных Gb трафика на диаграмме размаха по тарифам:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# словарь столбцов для оценки на диаграмме размаха\n",
    "plot_list = {\n",
    "    'durations': ['Кол-во потраченных минут на диаграмме размаха по тарифам:', 'Кол-во потраченных минут на гистограмме распределения по тарифам:'],\n",
    "    'messages': ['Кол-во отправленных сообщений на диаграмме размаха по тарифам:', 'Кол-во отправленных сообщений на гистограмме распределения по тарифам:'],\n",
    "    'gb_used': ['Кол-во потраченных Gb трафика на диаграмме размаха по тарифам:', 'Кол-во потраченных Gb трафика на гистограмме распределения по тарифам:']\n",
    "}\n",
    "\n",
    "\n",
    "\n",
    "# цикл по словарю\n",
    "for key, value in plot_list.items():\n",
    "    fig, axes = plt.subplots(1, 2, figsize=(17, 7))\n",
    "    print(value[0])\n",
    "    plot_box = create_plot(key, 'box')\n",
    "    plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим более точно на средние значения"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tariff</th>\n",
       "      <th>durations</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>messages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>smart</td>\n",
       "      <td>417.934948</td>\n",
       "      <td>16.359354</td>\n",
       "      <td>33.384029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultra</td>\n",
       "      <td>526.623350</td>\n",
       "      <td>19.525888</td>\n",
       "      <td>49.363452</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  tariff   durations    gb_used   messages\n",
       "0  smart  417.934948  16.359354  33.384029\n",
       "1  ultra  526.623350  19.525888  49.363452"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "analysis_pivot = df_pivot_short.pivot_table(\n",
    "    index='tariff', \n",
    "    values=['durations', 'messages', 'gb_used'], \n",
    "    aggfunc='mean'\n",
    ").reset_index()\n",
    "\n",
    "display(analysis_pivot)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В целом видно, на тарифе Smart больше выбросов чем на Ultra.\n",
    "По отправленным сообщения среднее значение не стремится к длинному хвосту высоких значений в обоих случаях. Значит выбросы по этому параметру давольно редкое явление в нашем датасете.\n",
    "\n",
    "На тарифе Smart в среднем пользователи тратят:\n",
    "- 418 минут на общение\n",
    "- 33 сообщения\n",
    "- 16Gb интернет трафика\n",
    "\n",
    "На тарифе Ultra в среднем пользователи тратят:\n",
    "- 527 минут на общение\n",
    "- 49 сообщений\n",
    "- 20Gb интернет трафика"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Наш датасет не генеральная совокупность, а выборка из какой-то большей совокупности. Примем это во внимание при расчете дисперсии"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_variance(tariff_name, column, column_name, operation):\n",
    "    if operation == 'variance':\n",
    "        analysis_pivot.loc[analysis_pivot['tariff'] == tariff_name, column_name] = np.var(df_pivot_short.query('tariff == @tariff_name')[column], ddof=1)\n",
    "        \n",
    "    elif operation == 'std':\n",
    "        analysis_pivot.loc[analysis_pivot['tariff'] == tariff_name, column_name] = np.sqrt(analysis_pivot.query('tariff == @tariff_name')[column])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tariff</th>\n",
       "      <th>durations</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>variance_durations</th>\n",
       "      <th>variance_gb_used</th>\n",
       "      <th>variance_messages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>smart</td>\n",
       "      <td>417.934948</td>\n",
       "      <td>16.359354</td>\n",
       "      <td>33.384029</td>\n",
       "      <td>36219.315784</td>\n",
       "      <td>33.160304</td>\n",
       "      <td>796.812958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultra</td>\n",
       "      <td>526.623350</td>\n",
       "      <td>19.525888</td>\n",
       "      <td>49.363452</td>\n",
       "      <td>100873.633397</td>\n",
       "      <td>97.334949</td>\n",
       "      <td>2285.266143</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  tariff   durations    gb_used   messages  variance_durations  \\\n",
       "0  smart  417.934948  16.359354  33.384029        36219.315784   \n",
       "1  ultra  526.623350  19.525888  49.363452       100873.633397   \n",
       "\n",
       "   variance_gb_used  variance_messages  \n",
       "0         33.160304         796.812958  \n",
       "1         97.334949        2285.266143  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "tariff_list = ['smart', 'ultra']\n",
    "variance_list = {\n",
    "    'durations': 'variance_durations',\n",
    "    'gb_used': 'variance_gb_used',\n",
    "    'messages': 'variance_messages'\n",
    "}\n",
    "\n",
    "for tariff in tariff_list:\n",
    "    for key, value in variance_list.items():\n",
    "        calculate_variance(tariff, key, value, 'variance')\n",
    "        \n",
    "        \n",
    "display(analysis_pivot)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Корень из дисперсии равен стандартному отклонению. Вычислим стандартное отклонение по этому правилу.\n",
    "\n",
    "Допишем нашу функцию std_list() для расчета стандартного отклонения"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>tariff</th>\n",
       "      <th>durations</th>\n",
       "      <th>gb_used</th>\n",
       "      <th>messages</th>\n",
       "      <th>variance_durations</th>\n",
       "      <th>variance_gb_used</th>\n",
       "      <th>variance_messages</th>\n",
       "      <th>std_durations</th>\n",
       "      <th>std_gb_used</th>\n",
       "      <th>std_messages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>smart</td>\n",
       "      <td>417.934948</td>\n",
       "      <td>16.359354</td>\n",
       "      <td>33.384029</td>\n",
       "      <td>36219.315784</td>\n",
       "      <td>33.160304</td>\n",
       "      <td>796.812958</td>\n",
       "      <td>190.313730</td>\n",
       "      <td>5.758498</td>\n",
       "      <td>28.227876</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ultra</td>\n",
       "      <td>526.623350</td>\n",
       "      <td>19.525888</td>\n",
       "      <td>49.363452</td>\n",
       "      <td>100873.633397</td>\n",
       "      <td>97.334949</td>\n",
       "      <td>2285.266143</td>\n",
       "      <td>317.606098</td>\n",
       "      <td>9.865848</td>\n",
       "      <td>47.804457</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  tariff   durations    gb_used   messages  variance_durations  \\\n",
       "0  smart  417.934948  16.359354  33.384029        36219.315784   \n",
       "1  ultra  526.623350  19.525888  49.363452       100873.633397   \n",
       "\n",
       "   variance_gb_used  variance_messages  std_durations  std_gb_used  \\\n",
       "0         33.160304         796.812958     190.313730     5.758498   \n",
       "1         97.334949        2285.266143     317.606098     9.865848   \n",
       "\n",
       "   std_messages  \n",
       "0     28.227876  \n",
       "1     47.804457  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "std_list = {\n",
    "    'variance_durations': 'std_durations',\n",
    "    'variance_gb_used': 'std_gb_used',\n",
    "    'variance_messages': 'std_messages'\n",
    "}\n",
    "\n",
    "for tariff in tariff_list:\n",
    "    for key, value in std_list.items():\n",
    "        calculate_variance(tariff, key, value, 'std')\n",
    "        \n",
    "        \n",
    "display(analysis_pivot)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим гистограммы распределения с разбивкой по тарифу. Для этого доработаем нашу функцию create_plot() и словарь plot_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Кол-во потраченных минут на гистограмме распределения по тарифам:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Кол-во отправленных сообщений на гистограмме распределения по тарифам:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Кол-во потраченных Gb трафика на гистограмме распределения по тарифам:\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1224x504 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# цикл по словарю\n",
    "for key, value in plot_list.items():\n",
    "    fig, axes = plt.subplots(1, 2, figsize=(17, 7))\n",
    "    print(value[1])\n",
    "    create_plot(key, 'distr')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**\n",
    "\n",
    "- распределение затраченных минут в smart более равномерное чем в тарифе ultra и похоже на распределение Пуассона;\n",
    "- распределение по сообщениям похоже на биноминальное и имеет общую структуру в двух тарифах. По графику видно что большинство пользователей не пользуется сообщениями вообще, либо в малых количествах, 21 век...;\n",
    "- относительно интернет-трафика, у тарифа смарт распределение похоже на нормальное. В ультре больше на распределение Пуассона "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Проверка гипотез"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для проверки первой и второй гипотез, нам нужно разбить наш датасет на две части (два тарифа). По факту мы получаем две генеральные совокупности по которым сопоставим среднее.\n",
    "\n",
    "Чтобы проверить гипотезу о равенстве среднего двух генеральных совокупностей по взятым из них выборкам, применим метод **st.ttest_ind()**\n",
    "**equal_var** зададим значение **False**, так как дисперсии генеральных совокупностей различаются."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нулевая гипотеза: средняя выручка по тарифу смарт и ультра равна\n",
    "\n",
    "Алтернативная гипотеза: средняя выручка по тарифу смарт и ультра различается"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 2.7240946993530856e-246\n",
      "Отвергаем нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "sample_smart = df_pivot.query('tariff == \"smart\"')['payment']\n",
    "sample_ultra = df_pivot.query('tariff == \"ultra\"')['payment']\n",
    "\n",
    "alpha = 0.05\n",
    "\n",
    "results = st.ttest_ind(sample_smart, sample_ultra, equal_var = False)\n",
    "\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if results.pvalue < alpha:\n",
    "    print('Отвергаем нулевую гипотезу')\n",
    "    \n",
    "else:\n",
    "    print('Не получилось отвергнуть нулевую гипотезу') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Нулевая гипотеза: средняя выручка по Москве и остальным городам равна\n",
    "\n",
    "Алтернативная гипотеза: средняя выручка по Москве и остальным городам различается"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 0.5126564657748214\n",
      "Не получилось отвергнуть нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "sample_moscow = df_pivot.query('city == \"Москва\"')['payment']\n",
    "sample_other = df_pivot.query('city != \"Москва\"')['payment']\n",
    "\n",
    "alpha = 0.05\n",
    "\n",
    "results = st.ttest_ind(sample_moscow, sample_other, equal_var = False)\n",
    "\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if results.pvalue < alpha:\n",
    "    print('Отвергаем нулевую гипотезу')\n",
    "    \n",
    "else:\n",
    "    print('Не получилось отвергнуть нулевую гипотезу') "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Вывод**\n",
    "\n",
    "- средняя выручка пользователей тарифов «Ультра» и «Смарт» **различается**;\n",
    "- средняя выручка пользователей из Москвы **не отличается** от выручки пользователей из других регионов."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Общий вывод"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Подводя итоги, можно дать следующие рекомендации для корректировки рекламного бюджета компании.\n",
    "Тариф Smart имеет большую аудиторию, и пользователи на этом тарифе чаще выходят за пределы ежемесячных лимитов. Соответственно данный тариф приносит больше денег чем Ultra.\n",
    "Итог - выделять больше денег на рекламу тарифа Smart по всей России."
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Необработанный формат ячейки",
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Содержание",
   "title_sidebar": "Contents",
   "toc_cell": true,
   "toc_position": {
    "height": "calc(100% - 180px)",
    "left": "10px",
    "top": "150px",
    "width": "325px"
   },
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
